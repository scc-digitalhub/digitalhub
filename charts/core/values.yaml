# SPDX-FileCopyrightText: Â© 2025 DSLab - Fondazione Bruno Kessler
#
# SPDX-License-Identifier: Apache-2.0

#  global --
global:
  #  global.externalHostAddress --
  externalHostAddress: ""
  #  global.externalTls --
  externalTls: false
  #  global.ociRegistry -- Values of your registry
  ociRegistry:
    #  global.ociRegistry.email -- Registry email
    email: ""
    #  global.ociRegistry.password -- Registry password
    password: ""
    #  global.ociRegistry.secretName -- Name of the secret of your registry. It has higher priority.
    secretName: ""
    #  global.ociRegistry.url -- Registry url
    url: ""
    #  global.ociRegistry.username -- Registry username
    username: ""

#  additionalConfig --
additionalConfig:
  #  additionalConfig.debug --
  debug:
    #  additionalConfig.debug.enableLogs -- Enable/disable logging
    enableLogs: true
    #  additionalConfig.debug.enableMetrics -- Enable/disable metrics
    enableMetrics: false
  #  additionalConfig.ephemeralVolume -- Ephemeral Volumes configurations
  ephemeralVolume:
    # additionalConfig.ephemeral.limits -- Configure max size for the ephemeral storage volumes
    limits: ""
    # additionalConfig.ephemeral.requests -- Configure the default size for all ephemeral storage volumes can be overrided by users
    requests: ""
    # additionalConfig.ephemeral.storageClass -- Specify the storage class for ephemeral storage
    storageClass: ""
  #  additionalConfig.image --
  image:
    # additionalConfig.image.pullPolicy -- Configure pull image pull policy for workload scheduled by core
    pullPolicy: IfNotPresent
  #  additionalConfig.job -- Jobs configuration
  job:
    #  additionalConfig.job.deadline -- Set deadline for jobs
    deadline: "604800"
    #  additionalConfig.job.jobSuspend -- Suspend jobs
    jobSuspend: false
  #  additionalConfig.persistenVolumeClaim -- Persisten Volume Claim configurations
  persistenVolumeClaim:
    # additionalConfig.persistenVolumeClaim.limits -- Configure max size for the Persisten Volume Claim volumes
    limits: ""
    # additionalConfig.persistenVolumeClaim.requests -- Configure the default size for all Persisten Volume Claim volumes can be overrided by users
    requests: ""
    # additionalConfig.persistenVolumeClaim.storageClass -- Specify the storage class for Persisten Volume Claim
    storageClass: ""
  #  additionalConfig.resources -- Resources for the pods created by Core
  resources:
    #  additionalConfig.resources.cpuLim -- CPU limit
    cpuLim: ""
    #  additionalConfig.resources.cpuReq -- CPU request
    cpuReq: ""
    #  additionalConfig.resources.gpuKey -- GPU key
    gpuKey: ""
    #  additionalConfig.resources.memLim -- Memory limit
    memLim: ""
    #  additionalConfig.resources.memReq -- Memory request
    memReq: ""
  #  additionalConfig.security --
  security:
    #  additionalConfig.security.disableRoot -- Disable root for pods created by Core
    disableRoot: true
  #  additionalConfig.service --
  service:
    #  additionalConfig.service.type -- Service type for pods created by Core
    type: NodePort
  #  additionalConfig.workflowVolume -- Workflow configuration
  workflow:
    #  additionalConfig.workflow.volume -- Workflow volume configuration
    volume:
      #  additionalConfig.workflow.volume.accessMode -- Access mode for the workflow volume
      accessMode: ReadWriteMany
      # additionalConfig.workflowVolume.storageClassName -- Specify the storage class for the workflow volume
      storageClassName: ""

#  affinity -- Affinity for pod assignment.
affinity: {}

#  argoWorkflow -- Argoworkflow configuration
argoWorkflow:
  #  argoWorkflow.configmap -- Name of the configmap containing the artifact repositories that the Argo Workflows should use
  configmap: artifact-repositories
  #  argoWorkflow.key -- Key of the artifact repository in the configmap
  key: default-artifact-repository
  #  argoWorkflow.serviceAccount -- Service account name.
  serviceAccount: default
  #  argoWorkflow.user --
  user: "1000"

#  authentication -- Authentication configuration
authentication:
  #  authentication.basic -- Basic Auth values
  basic:
    #  authentication.basic.enabled -- Enable/disable basicAuth authentication
    enabled: true
    #  authentication.basic.password -- BasicAuth password
    password: ""
    #  authentication.basic.username -- BasicAuth username
    username: ""
  #  authentication.openId -- OpenID Auth values
  openId:
    #  authentication.openId.enabled -- Enable/disable openId authentication
    enabled: false
    #  authentication.openId.externalSecret -- Reference to the Core OpenID Secret
    externalSecret:
      #  authentication.openId.externalSecret.key -- Key of the openId clientId
      key: ""
      #  authentication.openId.externalSecret.name -- OpenID secret name
      name: ""
    #  authentication.openId.issuerUri -- OpenId Issuer url
    issuerUri: ""
    #  authentication.openId.jwtAudience -- OpenId JWT Audience
    jwtAudience: ""
    #  authentication.openId.jwtClaim -- OpenId JWT claims
    jwtClaim: ""
    #  authentication.openId.jwtUsername -- OpenId JWT username
    jwtUsername: ""
    #  authentication.openId.oidcClientId -- OpenId JWT clientID
    oidcClientId: ""
    #  authentication.openId.scope -- OpenId JWT Scopes
    scope: ""

#  autoscaling -- Adjusts the number of replicas in a workload to match observed resource utilization such as CPU or memory usage.
autoscaling:
  #  autoscaling.enabled -- Enable horizontal scaling
  enabled: false
  #  autoscaling.maxReplicas -- Set max replicas for autoscaling
  maxReplicas: 100
  #  autoscaling.minReplicas -- Set min replicas for autoscaling
  minReplicas: 1
  #  autoscaling.targetCPUUtilizationPercentage -- Set CPU utilization percentage that trigger the autoscaling
  targetCPUUtilizationPercentage: 80

#  builder -- Configure OCI image builder
builder:
  framework:
    #  builder.framework.args -- Override/append arguments defined in the builder image
    args: ""
    #  builder.framework.client-secret -- Specify mTLS client secret used by buildkit cli to authenticate to a remote buildkit deamon
    client-secret:
      #  builder.framework.client-secret.mount-path: -- Mount path where the certificates are mounted inside the container
      mount-path: ""
      #  builder.framework.client-secret.name -- Client certificate secret name
      name: ""
    #  builder.framework.command -- Override command defined in the builder image
    command: ""
    #  builder.framework.image -- Set builder image
    image: gcr.io/kaniko-project/executor:latest
    #  builder.framework.image-prefix -- Sets the prefix that will be added to the image name
    image-prefix: ""
    #  builder.framework.name -- Configure which builder use to build OCI image (kaniko or buildkit)
    name: kaniko
    #  builder.framework.secret -- Specify the name of the secret that contains the registry credentials
    secret: ""

#  commonCredsSecret -- A secret that should be used when not using STS. It should contain the following populated keys:
#  DB_USERNAME: Username of the Postgres main db owner
#  DB_PASSWORD: Password of the Postgres main db owner
#  AWS_ACCESS_KEY_ID: Access key of the S3 Platform's main bucket user
#  AWS_SECRET_ACCESS_KEY: Secret key of the S3 Platform's main bucket user
#  DB_URL: Connection string to the platform's main db
#  DHCORE_CLIENT_ID: Core clientId
commonCredsSecret:
  #  commonCredsSecret.existingCommonCredsSecret -- Secret name
  secretName: ""

#  configmapAdditionalEnv -- Additional environment variables for the Core configmap, MUST be specified in key/value format
configmapAdditionalEnv: {}

#  coreAuthCreds --
coreAuthCreds:
  #  coreAuthCreds.clientId -- Core clientId
  clientId: ""
  #  coreAuthCreds.clientSecret -- Core clientSecret
  clientSecret: ""
  #  coreAuthCreds.existingSecret -- Existing secret containing Core clientID and clientSecret
  existingSecret:
    #  coreAuthCreds.existingSecret.clientIdKey -- Key of the clientID
    clientIdKey: ""
    #  coreAuthCreds.existingSecret.clientSecretKey -- Key of the clientSecret
    clientSecretKey: ""
    #  coreAuthCreds.existingSecret.secretName -- Name of the secret with Core clientId and clientSecret
    secretName: ""

#  coreTokens --
coreTokens:
  #  coreTokens.accessTokenDuration -- Duration of the access token generated by Core in seconds
  accessTokenDuration: "43200"
  #  coreTokens.refreshTokenDuration -- Duration of the refresh token generated by Core in seconds
  refreshTokenDuration: "86400"

#  corsOrigin --
corsOrigin: ""

#  databaseProvider --
databaseProvider:
  #  databaseProvider.database -- Name of the main database of the platform
  database: ""
  #  databaseProvider.host -- Host of the main database of the platform
  host: ""
  #  databaseProvider.port -- Port of the main database of the platform
  port: ""

#  defaultStorageClass -- Default storage class that should be used
defaultStorageClass: ""

#  fullnameOverride -- String to fully override `core.fullname` template.
fullnameOverride: ""

#  image --
image:
  #  image.pullPolicy -- Image pull policy
  pullPolicy: IfNotPresent
  #  image.repository -- Image repository
  repository: ghcr.io/scc-digitalhub/digitalhub-core
  #  image.tag -- Image tag
  tag: ""

#  imagePullSecrets --
imagePullSecrets: []

#  ingress -- Ingress configurations.
ingress:
  #  ingress.enabled -- Enables Ingress.
  enabled: false
  #  ingress.annotations -- Ingress annotations (values are templated).
  annotations: {}
  #  ingress.className -- Ingress Class Name. MAY be required for Kubernetes versions >= 1.18-
  className: ""
  #  ingress.hosts -- Ingress accepted hostnames.
  hosts:
    - host: core.home
      paths:
        - path: /
          pathType: ImplementationSpecific
  #  ingress.tls -- Ingress TLS configuration.
  tls: []

#  initImage --
initImage:
  #  initImage.builderTool --
  builderTool:
    #  initImage.builderTool.image -- Cpre builder repository
    image: ghcr.io/scc-digitalhub/digitalhub-core-builder-tool
    #  initImage.builderTool.tag -- Core builder tag
    tag: eff0a84f

#  keystore --
keystore:
  #  keystore.existingSecret -- Reference to the Keystore secret of Core
  existingSecret:
    #  keystore.existingSecret.keyName --
    keyName: ""
    #  keystore.existingSecret.secretName -- Name of the keystore secret
    secretName: ""
  #  keystore.keystoreKid --
  keystoreKid: ""
  #  keystore.keystorePath -- Path in which the Keystore will be mounted
  keystorePath: /etc/keystore

#  kubeai --
kubeai:
  #  kubeai.enabled -- Enable/Disable KubeAI
  enabled: true
  #  kubeai.port -- KubeAi port
  port: ""
  #  kubeai.serviceName -- Kubei service name
  serviceName: ""

#  lucene -- Values for Lucene configuration
lucene:
  #  lucene.indexPath -- Set the path for Lucene and enables it
  indexPath: "/lucene/"
  #  lucene.persistence -- Lucene persistence configuration
  persistence:
    #  lucene.persistence.enabled -- Enable persistence for Lucene
    enabled: true
    #  lucene.persistence.accessMode -- Access mode for the Lucene persistent volume claim
    accessMode: ReadWriteOnce
    #  lucene.persistence.size -- Size for the Lucene persistent volume claim
    size: 10Gi
    #  lucene.persistence.storageClass -- Storage class for the Lucene persistent volume claim
    storageClass: ""
  #  lucene.reindex -- Reindex of Lucene
  reindex: always

#  nameOverride -- String to partially override `core.fullname` template (will maintain the release name)
nameOverride: ""

#  nodeSelector --
nodeSelector: {}

#  podAnnotations -- Annotations to add to each pod.
podAnnotations: {}

#  podLabels -- Labels to add to each pod.
podLabels: {}

#  podSecurityContext -- [Security context for pod](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
podSecurityContext:
  #  podSecurityContext.fsGroup -- Configure group id used to mount volumes
  fsGroup: 65532
  #  podSecurityContext.runAsNonRoot -- Pod allow run as root.
  runAsNonRoot: true
  #  podSecurityContext.seccompProfile -- Pod configure seccompProfile.
  seccompProfile:
    #  podSecurityContext.seccompProfile.type -- Pod configure seccompProfile type.
    type: RuntimeDefault

#  postgres --
postgres:
  #  postgres.credentials --
  credentials:
    #  postgres.credentials.existingSecret --
    existingSecret:
      #  postgres.credentials.existingSecret.name -- Secret containing the Core database user credentials
      name: ""
      #  postgres.credentials.existingSecret.passwordKey -- Core db user password key
      passwordKey:
      #  postgres.credentials.existingSecret.usernameKey -- Core db user username key
      usernameKey:
    #  postgres.credentials.password -- Core db user password
    password: ""
    #  postgres.credentials.username -- Core db user username
    username: ""
  #  postgres.database -- Name of the Core database
  database: ""
  #  postgres.host -- Host of the Core database
  host: ""
  #  postgres.port -- Port of the Core database
  port: ""
  #  postgres.schema -- Schema of the Core database
  schema: ""

# priorityClassName -- Name of the priority class, leave empty to not set any.
priorityClassName: ""

#  registry --
registry:
  #  registry.kaniko --
  kaniko:
    #  registry.kaniko.imagePrefix --
    imagePrefix: ""

#  replicaCount -- Desired number of pods
replicaCount: 1

#  resources -- Pod resource requests and limits.
resources:
  #  resources.limits --
  limits:
    #  resources.limits.cpu -- Max cpu request
    cpu: 1000m
    #  resources.limits.memory -- Max memory request
    memory: 1024Mi
  #  resources.requests --
  requests:
    #  resources.requests.cpu -- Min cpu request
    cpu: 200m
    #  resources.requests.memory -- Max cpu request
    memory: 512Mi

#  runtime --
runtime:
  #  runtime.dbt --
  dbt:
    #  runtime.dbt.image -- DBT wrapper repository
    image: ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-dbt/wrapper-dbt
    #  runtime.dbt.tag -- DBT wrapper tag
    tag: 0.13.0
  hera:
    #  runtime.hera.image -- hera wrapper repository
    image: ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-hera/wrapper-hera
    #  runtime.hera.tag -- hera wrapper tag
    tag: 0.13.0
  #  runtime.huggingFace --
  huggingFace:
    #  runtime.huggingFace.image -- HuggingFaceServer repository
    image: kserve/huggingfaceserver
    #  runtime.huggingFace.tag -- HuggingFaceServer tag
    tag: v0.14.0
  #  runtime.kfp --
  kfp:
    #  runtime.kfp.image -- KFP wrapper repository
    image: ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-kfp/wrapper-kfp
    #  runtime.kfp.tag -- KFP wrapper tag
    tag: 0.13.0
  #  runtime.python --
  python:
    #  runtime.python.image -- Python runtime repository
    image: ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime
    #  runtime.python.tag3_10 -- Python runtime 3.10  tag
    tag3_10: 3.10-0.13.0
    #  runtime.python.tag3_11 -- Python runtime 3.11 tag
    tag3_11: 3.11-0.13.0
    #  runtime.python.tag3_12 -- Python runtime 3.12 tag
    tag3_12: 3.12-0.13.0
    #  runtime.python.tag3_9 -- Python runtime 3.9 tag
    tag3_9: 3.9-0.13.0

#  s3 --
s3:
  # s3.enabled -- Enable this option if you have an S3 deployment that you want to use with Core
  enabled: false
  #  s3.accessKey -- Explicit declaration of the Access key of your S3 instance.
  #  It has lower priority than the corresponding secret values.
  accessKey: ""
  #  s3.bucket -- Bucket of your S3 instance
  bucket: ""
  #  s3.dynamicCreds --
  dynamicCreds:
    #  s3.dynamicCreds.enabled -- Set this to true if you want to use dynamic credentials for S3 communication
    enabled: false
    #  s3.dynamicCreds.policy -- Set the policy to use when genereting credentials support only inline policy in json format
    policy: ""
  #  s3.endpoint -- Endpoint of your S3 instance
  endpoint: ""
  #  s3.existingSecret -- Reference to the secret containing AccessKey and Secret key of your S3 instance.
  #  These values have higher priority than the explicit declarations.
  existingSecret:
    #  s3.existingSecret.accessKeyKey -- Key corresponding to your accessKey in your secret
    accessKeyKey: ""
    #  s3.existingSecret.name -- Secret containing accessKey and secretKey of your s3 instance
    name: ""
    #  s3.existingSecret.secretKeyKey -- Key corresponding to your secretKey in your secret
    secretKeyKey: ""
  #  s3.port -- Port of your S3 instance
  port: ""
  #  s3.protocol -- Protocol of your S3 instance (http/https)
  protocol: http
  #  s3.publicUrl -- Public url of your S3 instance
  publicUrl: ""
  #  s3.region -- Region used by your S3 instance
  region: ""
  #  s3.secretKey -- Explicit declaration of the Secret key of your S3 instance.
  #  It has lower priority than the corresponding secret values.
  secretKey: ""

#  securityContext -- Core [Security context for container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
securityContext:
  #  securityContext.allowPrivilegeEscalation -- Core container allow privilege escalation.
  allowPrivilegeEscalation: false
  #  securityContext.capabilities -- Core container configure capabilities.
  capabilities:
    #  securityContext.capabilities.drop -- Core container drop capabilities.
    drop:
      - ALL
  #  securityContext.runAsNonRoot -- Core container allow run as root.
  runAsNonRoot: true
  #  securityContext.seccompProfile -- Core container configure seccompProfile.
  seccompProfile:
    #  securityContext.seccompProfile.type -- Core container configure seccompProfile type.
    type: RuntimeDefault

#  service -- Service configurations.
service:
  #  service.httpNodePort -- Service NodePort.
  httpNodePort: ""
  #  service.port -- Service port.
  port: "8080"
  #  service.type -- Service type.
  type: ClusterIP

#  serviceAccount -- Service account configuration.
serviceAccount:
  #  serviceAccount.annotations -- Additional Service Account annotations.
  annotations: {}
  #  serviceAccount.automount -- Automount API credentials for a Service Account.
  automount: true
  #  serviceAccount.create -- If `true` a Service Account will be created.
  create: true
  #  serviceAccount.name -- Service account name.
  name: core

#  solr -- Solr configuration
solr:
  #  solr.enabled -- Set this value to true if you want to use Core with an existing Solr instance
  enabled: false
  #  solr.basicAuth -- Basic Auth configuration of Solr
  basicAuth:
    #  solr.basicAuth.enabled -- Set this value to true if you use BasicAuth in your Solr instance
    enabled: false
    #  solr.credentials -- Solr credentials configuration
    credentials:
      # solr.basicAuth.credentials.existingSecrets -- Existing secrets for Solr Basic Auth configuration
      existingSecrets:
        # solr.basicAuth.credentials.existingSecrets.admin -- Existing secret for Solr Basic Auth admin user
        admin:
          #  solr.basicAuth.credentials.existingSecrets.admin.passwordKey -- Password key
          passwordKey: ""
          #  solr.basicAuth.credentials.existingSecrets.admin.secretName -- Secret name
          secretName: ""
          #  solr.basicAuth.credentials.existingSecrets.admin.usernameKey -- Username key
          usernameKey: ""
        #  solr.basicAuth.credentials.existingSecrets.user -- Existing secret for Solr Basic Auth user
        user:
          #  solr.basicAuth.credentials.existingSecrets.user.passwordKey -- Password key
          passwordKey: ""
          #  solr.basicAuth.credentials.existingSecrets.user.secretName -- Secret name
          secretName: ""
          #  solr.basicAuth.credentials.existingSecrets.user.usernameKey -- Username key
          usernameKey: ""
  #  solr.collection -- Solr collection configuration
  collection:
    #  solr.collection.name -- Name of the Solr collection
    name: ""
  #  solr.url -- URL of your Solr instance
  url: ""

#  sts --
sts:
  #  sts.enabled -- Enable/Disable STS component for dynamic credentials (Both for Postgres and S3 operations)
  enabled: false
  #  sts.affinity -- Affinity for pod assignment.
  affinity: {}
  #  sts.autoscaling -- Adjusts the number of replicas in a workload to match observed resource utilization such as CPU or memory usage.
  autoscaling:
    #  sts.autoscaling.enabled -- Enable horizontal scaling
    enabled: false
    #  sts.autoscaling.maxReplicas -- Set max replicas for autoscaling
    maxReplicas: 100
    #  sts.autoscaling.minReplicas -- Set min replicas for autoscaling
    minReplicas: 1
    #  sts.autoscaling.targetCPUUtilizationPercentage -- Set CPU utilization percentage that trigger the autoscaling
    targetCPUUtilizationPercentage: 80
  #  sts.client --
  client:
    #  sts.client.clientId -- ClientID used by STS
    clientId: ""
    #  sts.client.clientSecret -- ClientSecret used by STS
    clientSecret: ""
    #  sts.client.existingSecret --
    existingSecret:
      #  sts.client.existingSecret.clientIdKey -- Key corresponding to the STS ClientID
      clientIdKey: ""
      #  sts.client.existingSecret.clientSecretKey -- Key corresponding to the STS ClientSecret
      clientSecretKey: ""
      #  sts.client.existingSecret.name -- Name of the secret containing STS ClientID and ClientSecret
      name: ""
  #  sts.credentials --
  credentials:
    #  sts.credentials.roles -- Roles that will be mapped to the user for Database operations.
    #  Must correspond to the owner user of the Platform's main database.
    roles: ""
  #  sts.databaseProvider -- Values of the Platform's main database
  databaseProvider:
    #  sts.databaseProvider.enabled -- Enable/Disable dynamic credentials for Postgres operations.
    enabled: true
    #  sts.databaseProvider.credentials -- Credentials of the Platform's main database
    credentials:
      #  sts.databaseProvider.credentials.existingSecret -- Reference to the secret containing username and password of the Platform's main database owner user.
      #  These values have higher priority than the explicit declarations.
      existingSecret:
        #  sts.databaseProvider.credentials.existingSecret.name -- Name of the secret containing username and password of the Platform's main database owner user
        name: ""
        #  sts.databaseProvider.credentials.existingSecret.passwordKey -- Key corresponding to the Platform's main database owner user password
        passwordKey: ""
        #  sts.databaseProvider.credentials.existingSecret.usernameKey -- Key corresponding to the Platform's main database owner user username
        usernameKey: ""
      #  sts.databaseProvider.credentials.password -- Explicit declaration of the Platform's main database owner user password.
      #  It has lower priority than the corresponding secret values.
      password: ""
      #  sts.databaseProvider.credentials.username -- Explicit declaration of the Platform's main database owner user username.
      #  It has lower priority than the corresponding secret values.
      username: ""
  #  sts.fullnameOverride -- String to fully override `core.fullname` template.
  fullnameOverride: ""
  #  sts.image --
  image:
    #  sts.image.pullPolicy -- Image pull policy
    pullPolicy: IfNotPresent
    #  sts.image.repository -- STS container image repository.
    repository: ghcr.io/scc-digitalhub/db-sts
    #  sts.image.tag -- STS container image tag.
    tag: 0.3.0
  #  sts.imagePullSecrets -- Image pull secrets.
  #  Optionally specify an array of imagePullSecrets.
  #  Secrets must be manually created in the namespace.
  #  ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  #  sts.jwt --
  jwt:
    #  sts.jwt.audience -- JWT audience, must be sts.
    audience: sts
    #  sts.jwt.claim -- JWT claim, must be db/role
    claim: db/role
    #  sts.jwt.issuerUri -- URL of the JWT issuer.
    issuerUri: http://digitalhub-core:8080
  #  sts.nameOverride -- String to partially override `core.fullname` template (will maintain the release name)
  nameOverride: ""
  #  sts.nodeSelector -- Node labels for pod assignment. Ref: https://kubernetes.io/docs/user-guide/node-selection/.
  nodeSelector: {}
  #  sts.podAnnotations -- Annotations to add to each pod.
  podAnnotations: {}
  #  sts.podLabels -- Labels to add to each pod.
  podLabels: {}
  #  sts.podSecurityContext -- [Security context for pod](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  podSecurityContext:
    #  sts.podSecurityContext.runAsNonRoot -- Pod allow run as root.
    runAsNonRoot: true
    #  sts.podSecurityContext.seccompProfile -- Pod configure seccompProfile.
    seccompProfile:
      #  sts.podSecurityContext.seccompProfile.type -- Pod configure seccompProfile type.
      type: RuntimeDefault
  #  sts.priorityClassName -- Name of the priority class, leave empty to not set any.
  priorityClassName: ""
  #  sts.replicaCount -- Desired number of pods.
  replicaCount: 1
  #  sts.resources -- STS container resource requests and limits.
  resources:
    #  sts.resources.limits -- STS container imits
    limits:
      #  sts.resources.limits.cpu -- CPU limit
      cpu: 200m
      #  sts.resources.limits.memory -- Memory limit
      memory: 256Mi
    #  sts.resources.requests -- STS container requests
    requests:
      #  sts.resources.requests.cpu -- CPU request
      cpu: 100m
      #  sts.resources.requests.memory -- Memory request
      memory: 128Mi
  #  sts.securityContext -- STS [Security context for container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
  securityContext:
    #  sts.securityContext.allowPrivilegeEscalation -- STS container allow privilege escalation
    allowPrivilegeEscalation: false
    #  sts.securityContext.capabilities -- STS container configure capabilities
    capabilities:
      #  sts.securityContext.capabilities.drop -- STS container drop capabilities
      drop:
        - ALL
    #  sts.securityContext.runAsNonRoot -- STS container allow run as root
    runAsNonRoot: true
    #  sts.securityContext.seccompProfile -- STS container configure seccompProfile
    seccompProfile:
      #  sts.securityContext.seccompProfile.type -- STS container configure seccompProfile type
      type: RuntimeDefault
  #  sts.service -- STS service configurations
  service:
    #  sts.service.port -- STS service port
    port: 8080
    #  sts.service.type -- STS service type
    type: ClusterIP
  #  sts.serviceAccount -- STS service account configuration
  serviceAccount:
    #  sts.serviceAccount.annotations -- Additional STS Service Account annotations.
    annotations: {}
    #  sts.serviceAccount.automount -- Automount API credentials for a STS Service Account.
    automount: true
    #  sts.serviceAccount.create -- If `true` a STS Service Account will be created.
    create: true
    #  sts.serviceAccount.name -- STS service account name.
    name: core-sts
  #  sts.stsDb -- Values of the STS database
  stsDb:
    #  sts.stsDb.credentials -- Credentials of the STS database
    credentials:
      #  sts.stsDb.credentials.existingSecret -- Reference to the secret containing username and password of the STS database user.
      #  These values have higher priority than the explicit declarations.
      existingSecret:
        #  sts.stsDb.credentials.existingSecret.name -- Name of the secret containing username and password of the STS database user
        name: ""
        #  sts.stsDb.credentials.existingSecret.passwordKey -- Key corresponding to the STS database user password
        passwordKey: ""
        #  sts.stsDb.credentials.existingSecret.usernameKey -- Key corresponding to the STS database user username
        usernameKey: ""
      #  sts.stsDb.credentials.password -- Explicit declaration of the STS database user password.
      #  It has lower priority than the corresponding secret values.
      password: ""
      #  sts.stsDb.credentials.username -- Explicit declaration of the STS database user username.
      #  It has lower priority than the corresponding secret values.
      username: ""
    #  sts.stsDb.database -- Name of the STS database
    database: ""
    #  sts.stsDb.driver -- Driver used by the STS database
    driver: ""
    #  sts.stsDb.host -- Host of the STS database
    host: ""
    #  sts.stsDb.platform -- Which kind of database you are using for STS (For example, postgresql)
    platform: ""
    #  sts.stsDb.port -- STS Database port
    port: ""
    #  sts.stsDb.schema -- STS database schema
    schema: ""
  #  sts.tolerations -- List of node taints to tolerate (requires Kubernetes >= 1.6).
  tolerations: []
  #  sts.volumeMounts -- Additional volumes.
  volumeMounts: []
  #  sts.volumes -- Additional volumes to mount.
  volumes: []

#  templates -- Specify Core templates in list format.
#  Every template should correspond to a key in a configmap dedicated to the templates.
templates: []

#  tolerations -- List of node taints to tolerate (requires Kubernetes >= 1.6).
tolerations: []

#  volumeMounts -- Additional volumes.
volumeMounts: []

#  volumes -- Additional volumes to mount.
volumes: []
